Intro

Why test javascript
  - Ubiquitous
    - Pretty much always have to work with javascript in a web project
  - Popular
    - Most popular language on github
  - Improved code
    - Same practices as any other piece of code, same benefits apply
  - Automated verification
    - Fast & consistent verification, it is consistent right?
  - Documents functionality
    - Great source of expected code behavior for the next developer
  - Uncover bugs before QA
    - Helps you remove bugs before you even commit

Javascript testing
  - Don't pollute the global namespace
    - Use Javascript namespaces
  - Favor good reusable code
    - Module pattern for singletons, classes for objects
  - Avoid saving state in the DOM
    - Path to madness
  - Stay out of the DOM
    - If you don't need to do it in the DOM, don't
  - General unit testing applies
    - Everything that applies to your primary language!
    - Dependency inversion
    - Good OO practices such as, Single responsiblity principle & Low coupling

Jasmine
  - Behavior-Driven Development framework
    - BDD is like TDD, but more natural
  - No JavaScript dependencies
    - Just jasmine
  - Does not require a DOM
    - Works on NodeJS, if you are into that sort of thing
  - Clean API
    - Pivotal Labs did a really good job building jasmine

Jasmine Example
  - Openning 'describe' block defines system under test
  - 'beforeEach' is creating two objects needed within the test
  - Next 'describe' block defines method under test
  - 'it' block defines behavior
  - 'expect' is the verification

Jasmine Features
  - Large set of matchers
    - equality, regex, null, undefined, contains
  - Built in test doubles
    - Jasmineâ€™s test doubles are called spies
    - A spy can stub any function and tracks calls to it and all arguments
  - Mock the Javascript clock
    - Great for things like setTimeout or setInterval
  - Asynchronous Support
    - The waitsFor block takes a latch function, a failure message, and a timeout.
    - It does come up, so this is an important feature
  - CI Reporting
    - We added a custom reporter for todays demonstration

TravisCI
  - TODO

Good Javascript
  - Namespace your code
    - Avoid polluting global namespace, i.e. window
  - Use Module pattern for singletons
    - Well documented and used pattern
  - Use Object Oriented practices elsewhere
    - Many different flavors